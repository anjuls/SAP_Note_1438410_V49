SELECT NULL LINE FROM DUAL WHERE 1 = 0
UNION ALL (
SELECT NULL LINE FROM DUAL WHERE 1 = 0
) UNION ALL ( SELECT * FROM (
WITH BASIS_INFO AS
( SELECT
    OWNER,
    TABLE_NAME,
    COLUMN_LIST,
    'NULL ' || REPLACE(REPLACE(NVL(ALIAS_LIST, COLUMN_LIST), ', ', ','), ',', ', NULL ') DUAL_COLUMN_LIST,
    NVL(ALIAS_LIST, COLUMN_LIST) ALIAS_LIST,
    SAMPLE_METHOD,
    DECODE(SUBSTR(SAMPLE_METHOD, 1, 1), 'C', 'COMPUTE', 'R', 'ROWS', 'P', 'PERCENT') SAMPLE_TYPE,
    DECODE(SUBSTR(SAMPLE_METHOD, 1, 1), 'C', NULL, 'R', SUBSTR(SAMPLE_METHOD, 2) * 1000, 'P', SUBSTR(SAMPLE_METHOD, 2)) SAMPLE_SIZE,
    ORDER_BY,
    NUM_RECORDS,
    PARALLEL_DEGREE,
    RESTRICTION_CONDITIONS
  FROM
  ( SELECT
      '%' OWNER,
      'ZQQPR' TABLE_NAME,
      'KPRES, KPRAT, TIPME' COLUMN_LIST,    /* comma separated, NULL for record counter */
      '' ALIAS_LIST,          /* comma separated, only required if functions like SUBSTR and aliases are used in COLUMN_LIST */
      '' FUNCTION_LIST,       /* comma separated, only required if functions like SUBSTR and aliases are used in COLUMN_LIST */
      'C' SAMPLE_METHOD,      /* C -> compute, P10 -> 10 %, R5 -> 5.000 rows */
      'OCCURRENCES' ORDER_BY,     /* OCCURRENCES, COLUMN_VALUES */
      100 NUM_RECORDS,
      32 PARALLEL_DEGREE,
      '' RESTRICTION_CONDITIONS   /* NULL for no restriction */
    FROM
       DUAL
  )
)
SELECT 'SELECT NULL TABLE_NAME, NULL SAMPLE, ' FROM BASIS_INFO WHERE COLUMN_LIST IS NOT NULL
UNION ALL
( SELECT '  ' || DUAL_COLUMN_LIST || ',' FROM BASIS_INFO WHERE COLUMN_LIST IS NOT NULL )
UNION ALL
( SELECT '  NULL OCCURRENCES, NULL PERCENT FROM DUAL WHERE 1 = 0' FROM BASIS_INFO WHERE COLUMN_LIST IS NOT NULL )
UNION ALL
( SELECT 'SELECT NULL TABLE_NAME, NULL SAMPLE, NULL RESTRICTION_CONDITIONS, NULL TOTAL_RECORDS, ' FROM BASIS_INFO WHERE COLUMN_LIST IS NULL )
UNION ALL
( SELECT '  NULL MATCHING_RECORDS, NULL MATCHING_PCT FROM DUAL WHERE 1 = 0' FROM BASIS_INFO WHERE COLUMN_LIST IS NULL )
UNION ALL
( SELECT 'UNION ALL (' FROM DUAL )
UNION ALL
( SELECT 'SELECT NULL TABLE_NAME, NULL SAMPLE, ' FROM BASIS_INFO WHERE COLUMN_LIST IS NOT NULL )
UNION ALL
( SELECT '  ' || DUAL_COLUMN_LIST || ',' FROM BASIS_INFO WHERE COLUMN_LIST IS NOT NULL )
UNION ALL
( SELECT '  NULL OCCURRENCES, NULL PERCENT FROM DUAL WHERE 1 = 0' FROM BASIS_INFO WHERE COLUMN_LIST IS NOT NULL )
UNION ALL
( SELECT 'SELECT NULL TABLE_NAME, NULL SAMPLE, NULL RESTRICTION_CONDITIONS, NULL TOTAL_RECORDS, ' FROM BASIS_INFO WHERE COLUMN_LIST IS NULL )
UNION ALL
( SELECT '  NULL MATCHING_RECORDS, NULL MATCHING_PCT FROM DUAL WHERE 1 = 0' FROM BASIS_INFO WHERE COLUMN_LIST IS NULL )
UNION ALL
( SELECT ') UNION ALL ( SELECT * FROM (' FROM DUAL )
UNION ALL
( SELECT 'SELECT' FROM DUAL )
UNION ALL
( SELECT '  DECODE(ROWNUM, 1, ''' || TABLE_NAME || ''', '' '') TABLE_NAME,' FROM BASIS_INFO )
UNION ALL
( SELECT '  DECODE(ROWNUM, 1, ''' || SAMPLE_METHOD || ''', '' '') SAMPLE,' FROM BASIS_INFO )
UNION ALL
( SELECT '  S.*' FROM DUAL )
UNION ALL
( SELECT 'FROM' FROM DUAL )
UNION ALL
( SELECT '( SELECT' FROM DUAL )
UNION ALL
( SELECT '    ' || ALIAS_LIST || ',' FROM BASIS_INFO WHERE COLUMN_LIST IS NOT NULL )
UNION ALL
( SELECT '    TO_CHAR(COUNT(*), 99999999990) OCCURRENCES,' FROM BASIS_INFO WHERE COLUMN_LIST IS NOT NULL )
UNION ALL
( SELECT '    TO_CHAR(RATIO_TO_REPORT(COUNT(*)) OVER () * 100, 990.99) PERCENT' FROM BASIS_INFO WHERE COLUMN_LIST IS NOT NULL )
UNION ALL
( SELECT '    ''' || REPLACE(RESTRICTION_CONDITIONS, '''', '''''') || ''' RESTRICTION_CONDITIONS,' FROM BASIS_INFO WHERE COLUMN_LIST IS NULL )
UNION ALL
( SELECT '    TO_CHAR(SUM(TOTAL_RECORDS), 999999999990) TOTAL_RECORDS,' FROM BASIS_INFO WHERE COLUMN_LIST IS NULL )
UNION ALL
( SELECT '    TO_CHAR(SUM(MATCHING_RECORDS), 999999999999990) MATCHING_RECORDS,' FROM BASIS_INFO WHERE COLUMN_LIST IS NULL )
UNION ALL
( SELECT '    TO_CHAR(DECODE(SUM(TOTAL_RECORDS), 0, 0, SUM(MATCHING_RECORDS) / SUM(TOTAL_RECORDS) * 100), 99990.99999) MATCHING_PCT' FROM BASIS_INFO WHERE COLUMN_LIST IS NULL )
UNION ALL
( SELECT '  FROM' FROM DUAL )
UNION ALL
( SELECT '  ( SELECT' FROM DUAL )
UNION ALL
( SELECT '      /*+ PARALLEL("' || TABLE_NAME || '" ' || PARALLEL_DEGREE || ')' FROM BASIS_INFO WHERE PARALLEL_DEGREE NOT IN (-1, 1) )
UNION ALL
( SELECT '          PARALLEL_INDEX("' || BI.TABLE_NAME || '" "' || I.INDEX_NAME || '" ' || BI.PARALLEL_DEGREE || ')' FROM
    BASIS_INFO BI,
    DBA_INDEXES I
  WHERE
    I.TABLE_OWNER LIKE BI.OWNER AND
    I.TABLE_NAME = BI.TABLE_NAME AND
    BI.PARALLEL_DEGREE NOT IN (-1, 1)
)
UNION ALL
( SELECT '      */' FROM BASIS_INFO WHERE PARALLEL_DEGREE NOT IN (-1, 1) )
UNION ALL
( SELECT '      ' || COLUMN_LIST FROM BASIS_INFO WHERE COLUMN_LIST IS NOT NULL )
UNION ALL
( SELECT '      CASE WHEN ' || RESTRICTION_CONDITIONS || ' THEN 1 ELSE 0 END MATCHING_RECORDS,' FROM BASIS_INFO WHERE COLUMN_LIST IS NULL )
UNION ALL
( SELECT '      1 TOTAL_RECORDS' FROM BASIS_INFO WHERE COLUMN_LIST IS NULL )
UNION ALL
( SELECT '    FROM' FROM DUAL )
UNION ALL
( SELECT '      ' || DECODE(OWNER, '%', '', '"' || OWNER || '".') || '"' || TABLE_NAME || '"' FROM BASIS_INFO )
UNION ALL
( SELECT '    SAMPLE (' || SAMPLE_SIZE || ')' FROM BASIS_INFO WHERE SAMPLE_TYPE = 'PERCENT' AND SAMPLE_SIZE < 100 )
UNION ALL
( SELECT '    WHERE' FROM BASIS_INFO WHERE ( COLUMN_LIST IS NOT NULL AND RESTRICTION_CONDITIONS IS NOT NULL ) OR SAMPLE_TYPE = 'ROWS' ) 
UNION ALL
( SELECT '      ' || RESTRICTION_CONDITIONS || DECODE(SAMPLE_TYPE, 'ROWS', ' AND', '') 
    FROM BASIS_INFO 
  WHERE COLUMN_LIST IS NOT NULL AND RESTRICTION_CONDITIONS IS NOT NULL )
UNION ALL
( SELECT '      ROWNUM <= ' || SAMPLE_SIZE FROM BASIS_INFO WHERE SAMPLE_TYPE = 'ROWS' )
UNION ALL
( SELECT '  )' FROM DUAL )
UNION ALL
( SELECT '  GROUP BY' FROM BASIS_INFO WHERE COLUMN_LIST IS NOT NULL )
UNION ALL
( SELECT '    ' || ALIAS_LIST FROM BASIS_INFO WHERE COLUMN_LIST IS NOT NULL )
UNION ALL
( SELECT '  ORDER BY' FROM BASIS_INFO WHERE COLUMN_LIST IS NOT NULL )
UNION ALL
( SELECT '    ' || DECODE(ORDER_BY, 'COLUMN_VALUES', ALIAS_LIST, 'OCCURRENCES', 'OCCURRENCES DESC') FROM BASIS_INFO WHERE COLUMN_LIST IS NOT NULL )
UNION ALL
( SELECT ') S' FROM DUAL )
UNION ALL
( SELECT 'WHERE' FROM BASIS_INFO WHERE NUM_RECORDS != -1 AND COLUMN_LIST IS NOT NULL )
UNION ALL
( SELECT '  ROWNUM <= ' || NUM_RECORDS FROM BASIS_INFO WHERE NUM_RECORDS != -1 AND COLUMN_LIST IS NOT NULL )
UNION ALL
( SELECT '));' FROM DUAL )
));

